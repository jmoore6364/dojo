version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: dojo-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dojo_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Optional: for initialization scripts
    networks:
      - dojo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: dojo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dojo-network
    command: redis-server --appendonly yes --aof-use-rdb-preamble yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Optional: Redis Commander for Redis GUI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dojo-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - dojo-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Optional: Adminer for PostgreSQL GUI
  adminer:
    image: adminer:latest
    container_name: dojo-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    networks:
      - dojo-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

networks:
  dojo-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local